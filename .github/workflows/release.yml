name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：当推送的标签以 'v' 开头时触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04, windows-latest, windows-2022, windows-2019]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y cmake
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        fi
      shell: bash

    - name: Create build directory
      run: mkdir -p build
      shell: bash

    - name: Configure CMake
      run: cmake -DCMAKE_BUILD_TYPE=Release ..
      working-directory: ./build
      shell: bash

    - name: Build project
      run: cmake --build . --config Release
      working-directory: ./build
      shell: bash

    - name: Package binaries and config
      run: |
        mkdir -p release/bin
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp ./bin/Release/socks_server.exe release/bin/
        else
          cp ./bin/socks_server release/bin/
        fi
        cp config.json release/
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          7z a socks_server-${{ matrix.os }}.zip ./release/*
        else
          tar -czvf socks_server-${{ matrix.os }}.tar.gz -C release .
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: socks_server-${{ matrix.os }}
        path: |
          socks_server-${{ matrix.os }}.zip
          socks_server-${{ matrix.os }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Debug downloaded artifacts
      run: ls -lR artifacts
      shell: bash

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload release assets
      run: |
        for artifact in artifacts/*; do
          ext="${artifact##*.}"
          content_type=""
          if [[ "$ext" == "zip" ]]; then
            content_type="application/zip"
          elif [[ "$ext" == "gz" ]]; then
            content_type="application/gzip"
          fi
          gh release upload ${{ github.ref_name }} "$artifact" --clobber --content-type "$content_type"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
